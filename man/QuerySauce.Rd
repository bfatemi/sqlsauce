% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/query-thesauce.R
\name{QuerySauce}
\alias{AND}
\alias{ColSauce}
\alias{OR}
\alias{OpsDT}
\alias{Qsauce}
\alias{QuerySauce}
\alias{QueryTree}
\alias{WhereSauce}
\alias{Wsauce}
\alias{ch_op}
\alias{clop}
\alias{crop}
\alias{lop}
\alias{not}
\alias{op}
\alias{revop}
\alias{rop}
\title{The Sauce for Dishing Data}
\usage{
QuerySauce(tbl = NULL, top = NULL, cols = NULL, wh = NULL,
  where = NULL, verbose = FALSE)

WhereSauce(...)

OpsDT()

QueryTree(ll)

ColSauce(...)

AND(wh, string)

OR(wh, string)

not(...)

Qsauce(tbl = NULL, top = NULL, cols = NULL, wh = NULL, where = NULL,
  verbose = FALSE)

Wsauce(...)

op(x)

ch_op(x)

lop(x)

clop(x)

rop(x)

crop(x)

revop(x)
}
\arguments{
\item{tbl}{A character string that represents the sql tablename to query}

\item{top}{A numeric value indicating whether to return the top N rows from the
query execution}

\item{cols}{An optional character vector specifying columns to return. If not
provided, all columns will be returned}

\item{wh}{The output from a call to WhereSauce. A character string representing
a valid where clause}

\item{where}{Deprecated. Use \code{wh} instead.}

\item{verbose}{A boolean indicating whether to print the constructed query}

\item{...}{Arguments to create the WHERE statement}

\item{ll}{A list object that wraps the R expressions in order to translate to sql where conditions}

\item{x}{A logical operation in the form of an expression}

\item{...}{One or more logical operations to produce the negated syntax for sql}

\item{x}{A logical operation in the form of an expression}

\item{x}{A logical operation in the form of an expression}

\item{x}{A logical operation in the form of an expression}

\item{x}{A logical operation in the form of an expression}

\item{x}{A logical operation in the form of an expression}

\item{x}{A logical operation in the form of an expression}
}
\description{
The function \code{QuerySauce} and it's helper \code{WhereSauce} provide the
the ability to effortlessly build a valid sql query string
}
\details{
FILL IN DETAIL HERE. See example workflows
}
\section{Functions}{
\itemize{
\item \code{QuerySauce}: A function to build the query

\item \code{WhereSauce}: A function to the WHERE clause that becomes an input into
\code{QuerySauce}

\item \code{OpsDT}: Function to translate R operators to sql ones

\item \code{QueryTree}: Function to build query

\item \code{ColSauce}: A function to retrieve the column names associated with the
expressions given in the WhereSauce args

\item \code{AND}: A helper to append arbitrary AND conditions to the return object of \code{Wsauce}. See examples

\item \code{OR}: A helper to append arbitrary OR conditions to the return object of \code{Wsauce}. See examples

\item \code{not}: A function to handle not expressions

\item \code{Qsauce}: An alias to QuerySauce

\item \code{Wsauce}: An alias to WhereSauce

\item \code{op}: Get operator

\item \code{ch_op}: Get character op

\item \code{lop}: Get left side op

\item \code{clop}: Get character left side op

\item \code{rop}: Get right side op

\item \code{crop}: Get character right side op

\item \code{revop}: Reverse operations
}}
\examples{
\dontrun{
# STEP 1: Name the configured database
# STEP 2: Name the table to query
# STEP 3: Get the WHERE sauce (optional ingredient for the query sauce)
# STEP 4: Get the Query sauce (main ingredient for the data dish)
#----------------------------------------------------------------------------

db <- "RemoteFE"
tbl <- "SFDC.dbo.PROCEDURES"

#----------------------------------------------------------------------------
# Get procedures of specified subjects that occurred since 2015
#----------------------------------------------------------------------------
psub <- c("HPB", "dVP", "dVC", "dVL") # for WHERE sauce

wh    <- WhereSauce(ProcedureSubject == psub & Year(CreateDate) > 2015)
query <- QuerySauce(tbl, top = 1000, where = wh)

DT    <- xQuery(db, query)

#----------------------------------------------------------------------------
# Alternate workflow:
#   Open/Closing is handled by xQuery unless db is open. In which case,
#   the user can control when to open and close connections
#----------------------------------------------------------------------------

OpenDB(db)  # Open connection

# .... Do work

CloseDB(db) # Close connection
}

}

